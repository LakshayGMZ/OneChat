require('dotenv').config();
var app = require('../app');
var {startWebSocket} = require('../websocket/server')
var debug = require('debug')('onechat:server');
var http = require('http');
const { Server : SocketServer } = require("socket.io");
var { main } = require('../database')

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

const webSocket = new SocketServer(server, {
  cors: {
    origin: ["http://localhost:5173", "https://OneChat.lakshaygmz.repl.co"],
    credentials: true,
    allowedHeaders: ["authorization"],
    methods: ["GET", "POST"],

}});
startWebSocket(webSocket);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + port);
  main();
  
}